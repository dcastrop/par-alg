// fun testId : forall a, a -> a
//   = id;

poly P = K (() + int) + I * I;
//
fun testInOut : Rec P -> Rec P
  = in . out;

fun testInOut : P Rec P -> P Rec P
  = out . in;

poly L = K () + K int * I;

poly N = K () + I;
type Nat = Rec N;

fun length : int + int -> int + int
  = id +++ id;

fun length : L Nat -> L ()
   = id +++ id *** const ();


atom split : Rec L -> P Rec L;


atom merge : P Rec L -> Rec L;

fun ms : Rec L -> Rec L
  = rec [P] merge split;

